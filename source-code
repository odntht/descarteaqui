<html>
  <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <meta name="description" content="Projeto Descarte-Aqui da UnB">
  <meta name="author" content="">

<title>Projeto Descarte Aqui</title>
    <style>
      #map{
        height: 400px;
        width: 100%;
      }
      * {
  box-sizing: border-box;
}
body {
  font: 16px Arial;  
}
.autocomplete {
  /*the container must be positioned relative:*/
  position: relative;
  display: inline-block;
}
input {
  border: 1px solid transparent;
  background-color: #f1f1f1;
  padding: 10px;
  font-size: 16px;
}
input[type=text] {
  background-color: #f1f1f1;
  width: 100%;
}
input[type=submit] {
  background-color: DodgerBlue;
  color: #fff;
  cursor: pointer;
}
.autocomplete-items {
  position: absolute;
  border: 1px solid #d4d4d4;
  border-bottom: none;
  border-top: none;
  z-index: 99;
  /*position the autocomplete items to be the same width as the container:*/
  top: 100%;
  left: 0;
  right: 0;
}
.autocomplete-items div {
  padding: 10px;
  cursor: pointer;
  background-color: #fff; 
  border-bottom: 1px solid #d4d4d4; 
}
.autocomplete-items div:hover {
  /*when hovering an item:*/
  background-color: #e9e9e9; 
}
.autocomplete-active {
  /*when navigating through the items using the arrow keys:*/
  background-color: DodgerBlue !important; 
  color: #ffffff; 
}
    </style>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css" integrity="sha384-9gVQ4dYFwwWSjIDZnLEWnxCjeSWFphJiwGPXr1jddIhOegiu1FwO5qRGvFXOdJZ4" crossorigin="anonymous">
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js" integrity="sha384-uefMccjFJAIv6A+rW+L4AHf99KvxDjWSu1z9VI8SKNVmz4sk7buKt/6v9KI65qnm" crossorigin="anonymous"></script>
  <script src="https://maps.googleapis.com/maps/api/js"></script>
<script src="mapa.js"></script>
    </head>
  <body>
  <div class="container">
    <h1>Descarte Aqui</h1>
    <div class="d-flex flex-row">
      <div class="p-4">
<!--Make sure the form has the autocomplete function switched off:-->
<form autocomplete="off" action="/action_page.php">
  <div class="autocomplete" style="width:300px;">
    <input id="myInput" type="text" name="myCountry" placeholder="Digite o nome do material">
  </div>
  </div>
  <div margin-top="17%";>
  <input type="submit">
  </div>
</form>
<script>
function autocomplete(inp, arr) {
  /*the autocomplete function takes two arguments,
  the text field element and an array of possible autocompleted values:*/
  var currentFocus;
  /*execute a function when someone writes in the text field:*/
  inp.addEventListener("input", function(e) {
      var a, b, i, val = this.value;
      /*close any already open lists of autocompleted values*/
      closeAllLists();
      if (!val) { return false;}
      currentFocus = -1;
      /*create a DIV element that will contain the items (values):*/
      a = document.createElement("DIV");
      a.setAttribute("id", this.id + "autocomplete-list");
      a.setAttribute("class", "autocomplete-items");
      /*append the DIV element as a child of the autocomplete container:*/
      this.parentNode.appendChild(a);
      /*for each item in the array...*/
      for (i = 0; i < arr.length; i++) {
        /*check if the item starts with the same letters as the text field value:*/
        if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
          /*create a DIV element for each matching element:*/
          b = document.createElement("DIV");
          /*make the matching letters bold:*/
          b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
          b.innerHTML += arr[i].substr(val.length);
          /*insert a input field that will hold the current array item's value:*/
          b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
          /*execute a function when someone clicks on the item value (DIV element):*/
          b.addEventListener("click", function(e) {
              /*insert the value for the autocomplete text field:*/
              inp.value = this.getElementsByTagName("input")[0].value;
              /*close the list of autocompleted values,
              (or any other open lists of autocompleted values:*/
              closeAllLists();
          });
          a.appendChild(b);
        }
      }
  });
  /*execute a function presses a key on the keyboard:*/
  inp.addEventListener("keydown", function(e) {
      var x = document.getElementById(this.id + "autocomplete-list");
      if (x) x = x.getElementsByTagName("div");
      if (e.keyCode == 40) {
        /*If the arrow DOWN key is pressed,
        increase the currentFocus variable:*/
        currentFocus++;
        /*and and make the current item more visible:*/
        addActive(x);
      } else if (e.keyCode == 38) { //up
        /*If the arrow UP key is pressed,
        decrease the currentFocus variable:*/
        currentFocus--;
        /*and and make the current item more visible:*/
        addActive(x);
      } else if (e.keyCode == 13) {
        /*If the ENTER key is pressed, prevent the form from being submitted,*/
        e.preventDefault();
        if (currentFocus > -1) {
          /*and simulate a click on the "active" item:*/
          if (x) x[currentFocus].click();
        }
      }
  });
  function addActive(x) {
    /*a function to classify an item as "active":*/
    if (!x) return false;
    /*start by removing the "active" class on all items:*/
    removeActive(x);
    if (currentFocus >= x.length) currentFocus = 0;
    if (currentFocus < 0) currentFocus = (x.length - 1);
    /*add class "autocomplete-active":*/
    x[currentFocus].classList.add("autocomplete-active");
  }
  function removeActive(x) {
    /*a function to remove the "active" class from all autocomplete items:*/
    for (var i = 0; i < x.length; i++) {
      x[i].classList.remove("autocomplete-active");
    }
  }
  function closeAllLists(elmnt) {
    /*close all autocomplete lists in the document,
    except the one passed as an argument:*/
    var x = document.getElementsByClassName("autocomplete-items");
    for (var i = 0; i < x.length; i++) {
      if (elmnt != x[i] && elmnt != inp) {
        x[i].parentNode.removeChild(x[i]);
      }
    }
  }
  /*execute a function when someone clicks in the document:*/
  document.addEventListener("click", function (e) {
      closeAllLists(e.target);
      });
}

/*An array containing all the country names in the world:*/
var products = ["Aço","Ferro","Papel","Cartolina","Plástico","Papelão","Chumbo","Metal","Pilha","Lâmpada","Bateria","Alumínio","Cobre","Eletrônicos"];

/*initiate the autocomplete function on the "myInput" element, and pass along the products array as possible autocomplete values:*/
autocomplete(document.getElementById("myInput"), products);
</script>
    <h1>Google Maps</h1>
    <div id="map"></div>
    <script>
    function initMap()
      {
      var options = { //Opçoes do Mapa
        zoom:17, //Zoom que estará o mapa
        center:{lat:-15.989368,lng:-48.045253} //Localização Inicial do Mapa
      }  
      var map = new google.maps.Map(document.getElementById('map'), options); //Google Maps por si só - Novo Mapa
        
                
        //Array de marker
        var markers = [
          { //Funcao modelo para adicionar novos locais
          coords:{lat:-15.989368,lng:-48.047263},
          iconImage:'https://icon-icons.com/icons2/1239/PNG/32/heavymetal_83985.png', //Adicionar icone customizado
          content:'<h1>Local de Coleta 1</h1>'
        },
          {
          coords:{lat:-15.989768,lng:-48.045253},
          content:'<h1>Local de Coleta 2</h1>',
            iconImage:'https://icon-icons.com/icons2/641/PNG/32/plastic_icon-icons.com_59184.png'
        },
          {
          coords:{lat:-15.989368,lng:-48.045253},
          content:'<h1>Local de Coleta 3</h1>'
        }
          
        ];
        
        //Loop pelos markers
        for(var i = 0; i < markers.length;i++){
          addMarker(markers[i]);
        }
        
        //Funcao de Adicionar Marcadores
        function addMarker (props){
          var marker = new google.maps.Marker ({ //Lista de Locais Marcados - Marcadores
          position:props.coords,
          map:map,
          //icon:props.iconImage
        });
          if(props.iconImage){ //Verificar se usará icone customizado
             marker.setIcon(props.iconImage) //Definir imagem customizada
             }
          
          //Adicionar informacoes
          if(props.content)
          var infoWindow = new google.maps.InfoWindow({ //Adiciona informações que exibirao ao clicar no icone do local
          content:props.content
          });
        
        marker.addListener('click', function() {infoWindow.open(map,marker); //funcao que exibe as informacoes ao clicar no icone
        });
        }
      }
    </script>
    <script async defer
    src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDkaqI0fdS3vHK1pTgubI5UEob_vJ2GrQg&callback=initMap">
    </script>

    </body>
  </html>
